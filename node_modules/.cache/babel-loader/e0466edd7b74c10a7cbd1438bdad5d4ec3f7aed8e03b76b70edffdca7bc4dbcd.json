{"ast":null,"code":"var _jsxFileName = \"/Users/joseluistorres/my-projects/my-app/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react';\n\n// const CellTypes = {\n//   NUMBER: 'NUMBER',\n//   TEXT: 'TEXT',\n//   FORMULA: 'FORMULA'\n// };\n\n// const Cell = ({ type, value, onChange, onBlur }) => {\n//   const [editing, setEditing] = useState(false);\n//   const [inputValue, setInputValue] = useState(value);\n\n//   const handleDoubleClick = () => {\n//     setEditing(true);\n//   };\n\n//   const handleChange = (e) => {\n//     setInputValue(e.target.value);\n//   };\n\n//   const handleBlur = () => {\n//     setEditing(false);\n//     onBlur(inputValue);\n//   };\n\n//   return (\n//     <td onDoubleClick={handleDoubleClick}>\n//       {editing ? (\n//         <input\n//           type=\"text\"\n//           value={inputValue}\n//           onChange={handleChange}\n//           onBlur={handleBlur}\n//           autoFocus\n//         />\n//       ) : (\n//         <span>{value}</span>\n//       )}\n//     </td>\n//   );\n// };\n\n// const SpreadsheetRow = ({ cells, onChange, onBlur }) => {\n//   const handleCellChange = (index, newValue) => {\n//     const newCells = [...cells];\n//     newCells[index] = newValue;\n//     onChange(newCells);\n//   };\n\n//   return (\n//     <tr>\n//       {cells.map((cell, index) => (\n//         <Cell\n//           key={index}\n//           type={cell.type}\n//           value={cell.value}\n//           onChange={(newValue) => handleCellChange(index, newValue)}\n//           onBlur={(newValue) => onBlur(index, newValue)}\n//         />\n//       ))}\n//     </tr>\n//   );\n// };\n\n// const Spreadsheet = () => {\n//   const [rows, setRows] = useState([\n//     [{ type: CellTypes.NUMBER, value: '10' }, { type: CellTypes.NUMBER, value: '20' }],\n//     [{ type: CellTypes.TEXT, value: 'Hello' }, { type: CellTypes.FORMULA, value: '=A1+A2' }]\n//   ]);\n\n//   const handleCellChange = (rowIndex, cellIndex, newValue) => {\n//     const newRows = [...rows];\n//     newRows[rowIndex][cellIndex].value = newValue;\n//     setRows(newRows);\n//   };\n\n//   const handleCellBlur = (rowIndex, cellIndex, newValue) => {\n//     // If it's a formula cell, evaluate the formula\n//     if (rows[rowIndex][cellIndex].type === CellTypes.FORMULA) {\n//       try {\n//         const evalValue = eval(newValue.slice(1));\n//         handleCellChange(rowIndex, cellIndex, evalValue.toString());\n//       } catch (error) {\n//         console.error('Error evaluating formula:', error);\n//       }\n//     } else {\n//       handleCellChange(rowIndex, cellIndex, newValue);\n//     }\n//   };\n\n//   return (\n//     <table>\n//       <tbody>\n//         {rows.map((row, rowIndex) => (\n//           <SpreadsheetRow\n//             key={rowIndex}\n//             cells={row}\n//             onChange={(newRow) => {\n//               const newRows = [...rows];\n//               newRows[rowIndex] = newRow;\n//               setRows(newRows);\n//             }}\n//             onBlur={(cellIndex, newValue) => handleCellBlur(rowIndex, cellIndex, newValue)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CellTypes = {\n  NUMBER: 'NUMBER',\n  SUM: 'SUM'\n};\nconst Cell = ({\n  type,\n  value,\n  onChange,\n  onBlur\n}) => {\n  _s();\n  const [editing, setEditing] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n  const handleDoubleClick = () => {\n    setEditing(true);\n  };\n  const handleChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleBlur = () => {\n    setEditing(false);\n    onBlur(inputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    onDoubleClick: handleDoubleClick,\n    children: editing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: inputValue,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(Cell, \"SZFFV//8Lt/5WNJlKDajiWfg0AU=\");\n_c = Cell;\nconst SpreadsheetRow = ({\n  cells,\n  onChange,\n  onBlur\n}) => {\n  const handleCellChange = (index, newValue) => {\n    const newCells = [...cells];\n    newCells[index] = newValue;\n    onChange(newCells);\n  };\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: cells.map((cell, index) => /*#__PURE__*/_jsxDEV(Cell, {\n      type: cell.type,\n      value: cell.value,\n      onChange: newValue => handleCellChange(index, newValue),\n      onBlur: newValue => onBlur(index, newValue)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_c2 = SpreadsheetRow;\nconst Spreadsheet = () => {\n  _s2();\n  const [rows, setRows] = useState([[{\n    type: CellTypes.NUMBER,\n    value: '10'\n  }, {\n    type: CellTypes.NUMBER,\n    value: '20'\n  }, {\n    type: CellTypes.SUM,\n    value: '30'\n  }]]);\n  const handleCellChange = (rowIndex, cellIndex, newValue) => {\n    const newRows = [...rows];\n    newRows[rowIndex][cellIndex].value = newValue;\n    // If it's a SUM cell, update the sum\n    if (newRows[rowIndex][cellIndex].type === CellTypes.SUM) {\n      const sum = Number(newRows[rowIndex][0].value) + Number(newRows[rowIndex][1].value);\n      newRows[rowIndex][cellIndex].value = sum.toString();\n    }\n    setRows(newRows);\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(SpreadsheetRow, {\n        cells: row,\n        onChange: newRow => {\n          const newRows = [...rows];\n          newRows[rowIndex] = newRow;\n          setRows(newRows);\n        },\n        onBlur: (cellIndex, newValue) => handleCellChange(rowIndex, cellIndex, newValue)\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s2(Spreadsheet, \"gnzqyOBnQqBpvQo5+6KW/EwXkX4=\");\n_c3 = Spreadsheet;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(Spreadsheet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"SpreadsheetRow\");\n$RefreshReg$(_c3, \"Spreadsheet\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["logo","React","useState","jsxDEV","_jsxDEV","CellTypes","NUMBER","SUM","Cell","type","value","onChange","onBlur","_s","editing","setEditing","inputValue","setInputValue","handleDoubleClick","handleChange","e","target","handleBlur","onDoubleClick","children","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c","SpreadsheetRow","cells","handleCellChange","index","newValue","newCells","map","cell","_c2","Spreadsheet","_s2","rows","setRows","rowIndex","cellIndex","newRows","sum","Number","toString","row","newRow","_c3","App","className","_c4","$RefreshReg$"],"sources":["/Users/joseluistorres/my-projects/my-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\n\nimport React, { useState } from 'react';\n\n// const CellTypes = {\n//   NUMBER: 'NUMBER',\n//   TEXT: 'TEXT',\n//   FORMULA: 'FORMULA'\n// };\n\n// const Cell = ({ type, value, onChange, onBlur }) => {\n//   const [editing, setEditing] = useState(false);\n//   const [inputValue, setInputValue] = useState(value);\n\n//   const handleDoubleClick = () => {\n//     setEditing(true);\n//   };\n\n//   const handleChange = (e) => {\n//     setInputValue(e.target.value);\n//   };\n\n//   const handleBlur = () => {\n//     setEditing(false);\n//     onBlur(inputValue);\n//   };\n\n//   return (\n//     <td onDoubleClick={handleDoubleClick}>\n//       {editing ? (\n//         <input\n//           type=\"text\"\n//           value={inputValue}\n//           onChange={handleChange}\n//           onBlur={handleBlur}\n//           autoFocus\n//         />\n//       ) : (\n//         <span>{value}</span>\n//       )}\n//     </td>\n//   );\n// };\n\n// const SpreadsheetRow = ({ cells, onChange, onBlur }) => {\n//   const handleCellChange = (index, newValue) => {\n//     const newCells = [...cells];\n//     newCells[index] = newValue;\n//     onChange(newCells);\n//   };\n\n//   return (\n//     <tr>\n//       {cells.map((cell, index) => (\n//         <Cell\n//           key={index}\n//           type={cell.type}\n//           value={cell.value}\n//           onChange={(newValue) => handleCellChange(index, newValue)}\n//           onBlur={(newValue) => onBlur(index, newValue)}\n//         />\n//       ))}\n//     </tr>\n//   );\n// };\n\n// const Spreadsheet = () => {\n//   const [rows, setRows] = useState([\n//     [{ type: CellTypes.NUMBER, value: '10' }, { type: CellTypes.NUMBER, value: '20' }],\n//     [{ type: CellTypes.TEXT, value: 'Hello' }, { type: CellTypes.FORMULA, value: '=A1+A2' }]\n//   ]);\n\n//   const handleCellChange = (rowIndex, cellIndex, newValue) => {\n//     const newRows = [...rows];\n//     newRows[rowIndex][cellIndex].value = newValue;\n//     setRows(newRows);\n//   };\n\n//   const handleCellBlur = (rowIndex, cellIndex, newValue) => {\n//     // If it's a formula cell, evaluate the formula\n//     if (rows[rowIndex][cellIndex].type === CellTypes.FORMULA) {\n//       try {\n//         const evalValue = eval(newValue.slice(1));\n//         handleCellChange(rowIndex, cellIndex, evalValue.toString());\n//       } catch (error) {\n//         console.error('Error evaluating formula:', error);\n//       }\n//     } else {\n//       handleCellChange(rowIndex, cellIndex, newValue);\n//     }\n//   };\n\n//   return (\n//     <table>\n//       <tbody>\n//         {rows.map((row, rowIndex) => (\n//           <SpreadsheetRow\n//             key={rowIndex}\n//             cells={row}\n//             onChange={(newRow) => {\n//               const newRows = [...rows];\n//               newRows[rowIndex] = newRow;\n//               setRows(newRows);\n//             }}\n//             onBlur={(cellIndex, newValue) => handleCellBlur(rowIndex, cellIndex, newValue)}\n//           />\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\nconst CellTypes = {\n  NUMBER: 'NUMBER',\n  SUM: 'SUM'\n};\n\nconst Cell = ({ type, value, onChange, onBlur }) => {\n  const [editing, setEditing] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n\n  const handleDoubleClick = () => {\n    setEditing(true);\n  };\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleBlur = () => {\n    setEditing(false);\n    onBlur(inputValue);\n  };\n\n  return (\n    <td onDoubleClick={handleDoubleClick}>\n      {editing ? (\n        <input\n          type=\"number\"\n          value={inputValue}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          autoFocus\n        />\n      ) : (\n        <span>{value}</span>\n      )}\n    </td>\n  );\n};\n\nconst SpreadsheetRow = ({ cells, onChange, onBlur }) => {\n  const handleCellChange = (index, newValue) => {\n    const newCells = [...cells];\n    newCells[index] = newValue;\n    onChange(newCells);\n  };\n\n  return (\n    <tr>\n      {cells.map((cell, index) => (\n        <Cell\n          key={index}\n          type={cell.type}\n          value={cell.value}\n          onChange={(newValue) => handleCellChange(index, newValue)}\n          onBlur={(newValue) => onBlur(index, newValue)}\n        />\n      ))}\n    </tr>\n  );\n};\n\nconst Spreadsheet = () => {\n  const [rows, setRows] = useState([\n    [{ type: CellTypes.NUMBER, value: '10' }, { type: CellTypes.NUMBER, value: '20' }, { type: CellTypes.SUM, value: '30' }],\n  ]);\n\n  const handleCellChange = (rowIndex, cellIndex, newValue) => {\n    const newRows = [...rows];\n    newRows[rowIndex][cellIndex].value = newValue;\n    // If it's a SUM cell, update the sum\n    if (newRows[rowIndex][cellIndex].type === CellTypes.SUM) {\n      const sum = Number(newRows[rowIndex][0].value) + Number(newRows[rowIndex][1].value);\n      newRows[rowIndex][cellIndex].value = sum.toString();\n    }\n    setRows(newRows);\n  };\n\n  return (\n    <table>\n      <tbody>\n        {rows.map((row, rowIndex) => (\n          <SpreadsheetRow\n            key={rowIndex}\n            cells={row}\n            onChange={(newRow) => {\n              const newRows = [...rows];\n              newRows[rowIndex] = newRow;\n              setRows(newRows);\n            }}\n            onBlur={(cellIndex, newValue) => handleCellChange(rowIndex, cellIndex, newValue)}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Spreadsheet />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}