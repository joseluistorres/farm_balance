{"ast":null,"code":"/*\n * Module dependencies\n */\nimport * as ElementType from \"domelementtype\";\nimport { encodeXML, escapeAttribute, escapeText } from \"entities\";\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\nimport { elementNames, attributeNames } from \"./foreignNames.js\";\nconst unencodedElements = new Set([\"style\", \"script\", \"xmp\", \"iframe\", \"noembed\", \"noframes\", \"plaintext\", \"noscript\"]);\nfunction replaceQuotes(value) {\n  return value.replace(/\"/g, \"&quot;\");\n}\n/**\n * Format attributes\n */\nfunction formatAttributes(attributes, opts) {\n  var _a;\n  if (!attributes) return;\n  const encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== \"utf8\" ? encodeXML : escapeAttribute;\n  return Object.keys(attributes).map(key => {\n    var _a, _b;\n    const value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n    if (opts.xmlMode === \"foreign\") {\n      /* Fix up mixed-case attribute names */\n      key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n    }\n    if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n      return key;\n    }\n    return \"\".concat(key, \"=\\\"\").concat(encode(value), \"\\\"\");\n  }).join(\" \");\n}\n/**\n * Self-enclosing tags\n */\nconst singleTag = new Set([\"area\", \"base\", \"basefont\", \"br\", \"col\", \"command\", \"embed\", \"frame\", \"hr\", \"img\", \"input\", \"isindex\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\nexport function render(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const nodes = \"length\" in node ? node : [node];\n  let output = \"\";\n  for (let i = 0; i < nodes.length; i++) {\n    output += renderNode(nodes[i], options);\n  }\n  return output;\n}\nexport default render;\nfunction renderNode(node, options) {\n  switch (node.type) {\n    case ElementType.Root:\n      return render(node.children, options);\n    // @ts-expect-error We don't use `Doctype` yet\n    case ElementType.Doctype:\n    case ElementType.Directive:\n      return renderDirective(node);\n    case ElementType.Comment:\n      return renderComment(node);\n    case ElementType.CDATA:\n      return renderCdata(node);\n    case ElementType.Script:\n    case ElementType.Style:\n    case ElementType.Tag:\n      return renderTag(node, options);\n    case ElementType.Text:\n      return renderText(node, options);\n  }\n}\nconst foreignModeIntegrationPoints = new Set([\"mi\", \"mo\", \"mn\", \"ms\", \"mtext\", \"annotation-xml\", \"foreignObject\", \"desc\", \"title\"]);\nconst foreignElements = new Set([\"svg\", \"math\"]);\nfunction renderTag(elem, opts) {\n  var _a;\n  // Handle SVG / MathML in HTML\n  if (opts.xmlMode === \"foreign\") {\n    /* Fix up mixed-case element names */\n    elem.name = (_a = elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n    /* Exit foreign mode at integration points */\n    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {\n      opts = {\n        ...opts,\n        xmlMode: false\n      };\n    }\n  }\n  if (!opts.xmlMode && foreignElements.has(elem.name)) {\n    opts = {\n      ...opts,\n      xmlMode: \"foreign\"\n    };\n  }\n  let tag = \"<\".concat(elem.name);\n  const attribs = formatAttributes(elem.attribs, opts);\n  if (attribs) {\n    tag += \" \".concat(attribs);\n  }\n  if (elem.children.length === 0 && (opts.xmlMode ?\n  // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n  opts.selfClosingTags !== false :\n  // User explicitly asked for self-closing tags, even in HTML mode\n  opts.selfClosingTags && singleTag.has(elem.name))) {\n    if (!opts.xmlMode) tag += \" \";\n    tag += \"/>\";\n  } else {\n    tag += \">\";\n    if (elem.children.length > 0) {\n      tag += render(elem.children, opts);\n    }\n    if (opts.xmlMode || !singleTag.has(elem.name)) {\n      tag += \"</\".concat(elem.name, \">\");\n    }\n  }\n  return tag;\n}\nfunction renderDirective(elem) {\n  return \"<\".concat(elem.data, \">\");\n}\nfunction renderText(elem, opts) {\n  var _a;\n  let data = elem.data || \"\";\n  // If entities weren't decoded, no need to encode them back\n  if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {\n    data = opts.xmlMode || opts.encodeEntities !== \"utf8\" ? encodeXML(data) : escapeText(data);\n  }\n  return data;\n}\nfunction renderCdata(elem) {\n  return \"<![CDATA[\".concat(elem.children[0].data, \"]]>\");\n}\nfunction renderComment(elem) {\n  return \"<!--\".concat(elem.data, \"-->\");\n}","map":{"version":3,"names":["ElementType","encodeXML","escapeAttribute","escapeText","elementNames","attributeNames","unencodedElements","Set","replaceQuotes","value","replace","formatAttributes","attributes","opts","_a","encode","encodeEntities","decodeEntities","xmlMode","Object","keys","map","key","_b","get","emptyAttrs","concat","join","singleTag","render","node","options","arguments","length","undefined","nodes","output","i","renderNode","type","Root","children","Doctype","Directive","renderDirective","Comment","renderComment","CDATA","renderCdata","Script","Style","Tag","renderTag","Text","renderText","foreignModeIntegrationPoints","foreignElements","elem","name","parent","has","tag","attribs","selfClosingTags","data"],"sources":["/Users/joseluistorres/my-projects/farm_balance/node_modules/cheerio-select/node_modules/dom-serializer/lib/esm/index.js"],"sourcesContent":["/*\n * Module dependencies\n */\nimport * as ElementType from \"domelementtype\";\nimport { encodeXML, escapeAttribute, escapeText } from \"entities\";\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\nimport { elementNames, attributeNames } from \"./foreignNames.js\";\nconst unencodedElements = new Set([\n    \"style\",\n    \"script\",\n    \"xmp\",\n    \"iframe\",\n    \"noembed\",\n    \"noframes\",\n    \"plaintext\",\n    \"noscript\",\n]);\nfunction replaceQuotes(value) {\n    return value.replace(/\"/g, \"&quot;\");\n}\n/**\n * Format attributes\n */\nfunction formatAttributes(attributes, opts) {\n    var _a;\n    if (!attributes)\n        return;\n    const encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false\n        ? replaceQuotes\n        : opts.xmlMode || opts.encodeEntities !== \"utf8\"\n            ? encodeXML\n            : escapeAttribute;\n    return Object.keys(attributes)\n        .map((key) => {\n        var _a, _b;\n        const value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n        if (opts.xmlMode === \"foreign\") {\n            /* Fix up mixed-case attribute names */\n            key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n        }\n        if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n            return key;\n        }\n        return `${key}=\"${encode(value)}\"`;\n    })\n        .join(\" \");\n}\n/**\n * Self-enclosing tags\n */\nconst singleTag = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\",\n]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\nexport function render(node, options = {}) {\n    const nodes = \"length\" in node ? node : [node];\n    let output = \"\";\n    for (let i = 0; i < nodes.length; i++) {\n        output += renderNode(nodes[i], options);\n    }\n    return output;\n}\nexport default render;\nfunction renderNode(node, options) {\n    switch (node.type) {\n        case ElementType.Root:\n            return render(node.children, options);\n        // @ts-expect-error We don't use `Doctype` yet\n        case ElementType.Doctype:\n        case ElementType.Directive:\n            return renderDirective(node);\n        case ElementType.Comment:\n            return renderComment(node);\n        case ElementType.CDATA:\n            return renderCdata(node);\n        case ElementType.Script:\n        case ElementType.Style:\n        case ElementType.Tag:\n            return renderTag(node, options);\n        case ElementType.Text:\n            return renderText(node, options);\n    }\n}\nconst foreignModeIntegrationPoints = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\",\n]);\nconst foreignElements = new Set([\"svg\", \"math\"]);\nfunction renderTag(elem, opts) {\n    var _a;\n    // Handle SVG / MathML in HTML\n    if (opts.xmlMode === \"foreign\") {\n        /* Fix up mixed-case element names */\n        elem.name = (_a = elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n        /* Exit foreign mode at integration points */\n        if (elem.parent &&\n            foreignModeIntegrationPoints.has(elem.parent.name)) {\n            opts = { ...opts, xmlMode: false };\n        }\n    }\n    if (!opts.xmlMode && foreignElements.has(elem.name)) {\n        opts = { ...opts, xmlMode: \"foreign\" };\n    }\n    let tag = `<${elem.name}`;\n    const attribs = formatAttributes(elem.attribs, opts);\n    if (attribs) {\n        tag += ` ${attribs}`;\n    }\n    if (elem.children.length === 0 &&\n        (opts.xmlMode\n            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n                opts.selfClosingTags !== false\n            : // User explicitly asked for self-closing tags, even in HTML mode\n                opts.selfClosingTags && singleTag.has(elem.name))) {\n        if (!opts.xmlMode)\n            tag += \" \";\n        tag += \"/>\";\n    }\n    else {\n        tag += \">\";\n        if (elem.children.length > 0) {\n            tag += render(elem.children, opts);\n        }\n        if (opts.xmlMode || !singleTag.has(elem.name)) {\n            tag += `</${elem.name}>`;\n        }\n    }\n    return tag;\n}\nfunction renderDirective(elem) {\n    return `<${elem.data}>`;\n}\nfunction renderText(elem, opts) {\n    var _a;\n    let data = elem.data || \"\";\n    // If entities weren't decoded, no need to encode them back\n    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false &&\n        !(!opts.xmlMode &&\n            elem.parent &&\n            unencodedElements.has(elem.parent.name))) {\n        data =\n            opts.xmlMode || opts.encodeEntities !== \"utf8\"\n                ? encodeXML(data)\n                : escapeText(data);\n    }\n    return data;\n}\nfunction renderCdata(elem) {\n    return `<![CDATA[${elem.children[0].data}]]>`;\n}\nfunction renderComment(elem) {\n    return `<!--${elem.data}-->`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}